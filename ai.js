import OpenAI from 'openai';
import chalk from 'chalk';

// Lazy initialization of OpenAI client
let openai = null;

function getOpenAIClient() {
  if (!openai) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }
  return openai;
}

/**
 * Generate a commit message using OpenAI
 * @param {string} diff - The git diff output
 * @returns {Promise<string>} The generated commit message
 */
export async function generateCommitMessage(diff) {
  try {
    if (!diff || diff.trim() === '') {
      throw new Error('No diff provided for commit message generation');
    }

    const model = process.env.OPENAI_MODEL || 'gpt-4o-mini';
    
    const prompt = createCommitPrompt(diff);
    
    const completion = await getOpenAIClient().chat.completions.create({
      model: model,
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant that writes clear and concise git commit messages following best practices.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 100,
      temperature: 0.7,
    });

    const message = completion.choices[0]?.message?.content?.trim();
    
    if (!message) {
      throw new Error('No commit message generated by AI');
    }

    return cleanCommitMessage(message);
  } catch (error) {
    if (error.status === 401) {
      throw new Error('Invalid OpenAI API key. Please check your .env file.');
    } else if (error.status === 429) {
      throw new Error('OpenAI API rate limit exceeded. Please try again later.');
    } else if (error.status === 500) {
      throw new Error('OpenAI API server error. Please try again later.');
    }
    
    throw new Error(`Failed to generate commit message: ${error.message}`);
  }
}

/**
 * Create the prompt for the AI model
 * @param {string} diff - The git diff output
 * @returns {string} The formatted prompt
 */
function createCommitPrompt(diff) {
  // Truncate very long diffs to avoid token limits
  const maxDiffLength = 8000;
  const truncatedDiff = diff.length > maxDiffLength 
    ? diff.substring(0, maxDiffLength) + '\n\n... (diff truncated for brevity)'
    : diff;

  return `Generate a clear and concise git commit message for the following staged changes. 

The commit message should:
- Be written in the imperative mood (e.g., "Add feature" not "Added feature")
- Be concise but descriptive (ideally under 72 characters)
- Focus on what the change does, not how it does it
- Not include unnecessary punctuation or quotes
- Follow conventional commit format if appropriate (feat:, fix:, docs:, etc.)

Here are the staged changes:

${truncatedDiff}

Respond with just the commit message, nothing else.`;
}

/**
 * Clean and validate the AI-generated commit message
 * @param {string} message - The raw message from AI
 * @returns {string} The cleaned message
 */
function cleanCommitMessage(message) {
  // Remove quotes if present
  let cleaned = message.replace(/^["']|["']$/g, '');
  
  // Remove any extra whitespace
  cleaned = cleaned.trim();
  
  // Remove trailing periods unless it's part of an abbreviation
  cleaned = cleaned.replace(/\.$/, '');
  
  // Ensure first letter is capitalized if not using conventional commit format
  if (!cleaned.match(/^(feat|fix|docs|style|refactor|perf|test|chore|build|ci):/i)) {
    cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);
  }
  
  return cleaned;
}

/**
 * Test the OpenAI connection
 * @returns {Promise<boolean>} True if connection is successful
 */
export async function testOpenAIConnection() {
  try {
    await getOpenAIClient().models.list();
    return true;
  } catch (error) {
    console.log(chalk.red(`‚ùå OpenAI connection failed: ${error.message}`));
    return false;
  }
}

/**
 * Get available OpenAI models
 * @returns {Promise<Array>} List of available models
 */
export async function getAvailableModels() {
  try {
    const models = await getOpenAIClient().models.list();
    return models.data
      .filter(model => model.id.includes('gpt'))
      .map(model => model.id)
      .sort();
  } catch (error) {
    throw new Error(`Failed to fetch available models: ${error.message}`);
  }
}